#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

typedef struct{
	char words[201];
} string;
void quickSort(string *word, int f, int l)
{
	string pivo;
	string temp;
	int i, j;

	if (l - f > 0)
	{
		if (f < l)
		{
			i = f;
			j = l;
			pivo = word[(i + j) / 2];

			do
			{
				while (strcmp(word[i].words, pivo.words) < 0)
					i++;
				while (strcmp(word[j].words, pivo.words) > 0)
					j--;
				if (i <= j)
				{
					temp = word[i];
					word[i] = word[j];
					word[j] = temp;
					i++; j--;
				}
			} while (i <= j);
			quickSort(word, f, j);
			quickSort(word, i, l);
		}
	}
}
void qSortHalf(string *word, int size)
{

	quickSort(word, 0, size - 1);

}
bool strFunc(char *str, string *word, unsigned size)
{
	unsigned i;
	for (i = 0; i < size; i++)
		if (strcmp(word[i].words, str) == 0)
			return true;
	return false;
}

int main ()
{

	unsigned i, j, k = 0;
	char tempEntrada[201], tempSaida[201];
	string word[5050];

	memset(word, 0, sizeof(word));
	while (scanf(" %[^\n]", tempEntrada) != EOF)
	{
		i = j = 0;
		while (tempEntrada[i])
		{
			while (isalpha(tempEntrada[i]))
				tempSaida[j++] = tolower(tempEntrada[i++]);
			if (tempEntrada[i] == '\0')
			{
				tempSaida[j] = '\0';
				if (!strFunc(tempSaida, word, k))
					strcpy(word[k++].words, tempSaida);
				j = 0;
				memset(tempSaida, 0, sizeof(tempSaida));
				break;
			}
			tempSaida[j] = '\0';
			while (!isalpha(tempEntrada[i]))
			{
				i++;
				if (tempEntrada[i] == '\0')
					break;
			}
			if (!strFunc(tempSaida, word, k))
				strcpy(word[k++].words, tempSaida);
			j = 0;
			memset(tempSaida, 0, sizeof(tempSaida));
		}
		memset(tempEntrada, 0, sizeof(tempEntrada));
	}
	qSortHalf(word, k);
	j = 0;
	if (strcmp(word[0].words,"\0") == 0)
		j = 1;
	for (; j < k; j++)
		printf("%s\n", word[j].words);

}

